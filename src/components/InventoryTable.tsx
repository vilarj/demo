import { Space } from 'antd';
import type { TablePaginationConfig } from 'antd/es/table';
import type { FilterValue, SorterResult } from 'antd/es/table/interface';
import React, { useCallback } from 'react';
import InventoryHeader from './InventoryHeader';
import InventoryPagination from './InventoryPagination';
import InventoryTableBody from './InventoryTableBody';
import UnassignModal from './UnassignModal';
import { useInventoryTable } from './hooks/useInventoryTable';
import { useInventoryTableColumns } from './useInventoryTableColumns';

/**
 * InventoryTable Component
 *
 * The main orchestrator component for the inventory management system. This component
 * integrates all sub-components and hooks to provide a complete inventory management
 * interface including table display, search, filtering, pagination, inline editing,
 * and tool assignment/unassignment functionality.
 *
 * @component
 *
 *
 * @returns JSX.Element representing the complete inventory management interface
 *
 * @remarks
 * - Uses the useInventoryTable hook for centralized state management and business logic
 * - Implements the container-component pattern for clean separation of concerns
 * - All event handlers are memoized with useCallback for optimal performance
 * - Employee filtering is performed client-side with memoized calculations
 * - Integrates four main sub-components: Header, TableBody, Pagination, and UnassignModal
 * - Supports real-time search, sorting, pagination, and inline editing capabilities
 *
 * Architecture:
 * - State Management: Centralized in useInventoryTable hook
 * - Column Configuration: Generated by useInventoryTableColumns hook
 * - Event Handling: Local handlers bridge component events to hook methods
 * - Performance: Optimized with React.useMemo and useCallback
 *
 * Key Features:
 * - Tab-based filtering (All/Assigned/Available tools)
 * - Real-time search across tool properties
 * - Server-side sorting with multiple column support for optimal performance
 * - Paginated data display with customizable page sizes
 * - Inline editing for employee assignments and dates
 * - Modal confirmation for tool unassignment
 * - Responsive design with horizontal scrolling
 */
const InventoryTable: React.FC = () => {
  // Extract all state and handlers from the custom hook
  const inventoryTable = useInventoryTable();
  const {
    // Tab and search state
    activeTab,
    setActiveTab,
    setSearchText,

    // Editing state
    editingState,
    employeeSearchText,

    // Modal state
    unassignModalVisible,
    selectedTool,

    // Data state
    tools,
    employees,
    pagination,
    setPagination,
    loading,

    // Sorting state
    setSortBy,
    setSortOrder,

    // References
    inputRef,
    inventory,
    employeeMap,

    // Event handlers
    handleEdit,
    handleUnassign,
    handleSave,
    handleCancel,
    handleUnassignConfirm,
    handleUnassignCancel,
    handleEmployeeSelect,
    handleEmployeeSearch,
    handleDateChange,
  } = inventoryTable;

  /**
   * Handle pagination changes from the pagination component
   * Updates both current page and page size when modified
   */
  const handlePaginationChange = useCallback(
    (page: number, pageSize?: number) => {
      setPagination({
        ...pagination,
        current: page,
        pageSize: pageSize || pagination.pageSize,
      });
    },
    [setPagination, pagination],
  );

  /**
   * Handle table sorting changes
   * Processes Ant Design's sorter result and updates sort state
   * Handles both single and multiple column sorting scenarios
   * All sorting is processed server-side via the backend API
   */
  const handleTableChange = useCallback(
    (
      _tablePagination: TablePaginationConfig,
      _filters: Record<string, FilterValue | null>,
      sorter: SorterResult<import('../inventory-api').Tool> | SorterResult<import('../inventory-api').Tool>[],
    ) => {
      // Handle array of sorters (multiple column sorting)
      const sortObj = Array.isArray(sorter) ? sorter[0] : sorter;

      if (sortObj && sortObj.field && sortObj.order) {
        // Set sort parameters which will trigger a backend API call
        setSortBy(sortObj.field as keyof import('../inventory-api').Tool);
        setSortOrder(sortObj.order === 'ascend' ? 'asc' : 'desc');
      } else {
        // Clear sorting when no sorter is provided
        setSortBy('type'); // Default sort field
        setSortOrder('asc'); // Default sort order
      }
    },
    [setSortBy, setSortOrder],
  );

  /**
   * Filter employees based on search text for the employee selector
   * Searches both employee name and ID fields case-insensitively
   */
  const filteredEmployees = React.useMemo(() => {
    if (!employeeSearchText) return employees;

    return employees.filter(
      (employee: (typeof employees)[number]) =>
        employee.name.toLowerCase().includes(employeeSearchText.toLowerCase()) ||
        employee.id.toLowerCase().includes(employeeSearchText.toLowerCase()),
    );
  }, [employees, employeeSearchText]);

  /**
   * Generate table columns configuration using the custom hook
   * Passes all necessary state and handlers for inline editing functionality
   */
  const columns = useInventoryTableColumns({
    editingState,
    employeeSearchText,
    filteredEmployees,
    employeeMap,
    handleEmployeeSelect,
    handleEmployeeSearch,
    handleDateChange,
    handleEdit,
    handleSave,
    handleCancel,
    handleUnassign,
    inputRef,
    inventorySystem: inventory,
  });

  return (
    <Space direction="vertical" size="middle" className="inventory-table-container w-full">
      {/* Header Component: Search, filters, and tab navigation */}
      <InventoryHeader
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        inventory={inventory}
        setSearchText={setSearchText}
      />

      {/* Table Body Component: Main data display with sorting and editing */}
      <InventoryTableBody columns={columns} tools={tools} loading={loading} handleTableChange={handleTableChange} />

      {/* Pagination Component: Page navigation and size controls */}
      <InventoryPagination pagination={pagination} handlePaginationChange={handlePaginationChange} />

      {/* Unassign Modal: Confirmation dialog for tool unassignment */}
      <UnassignModal
        visible={unassignModalVisible}
        selectedTool={selectedTool}
        employeeMap={employeeMap}
        onConfirm={handleUnassignConfirm}
        onCancel={handleUnassignCancel}
      />
    </Space>
  );
};

export default InventoryTable;
